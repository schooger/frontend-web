/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'

// Create Virtual Routes

const MetaverseLazyImport = createFileRoute('/metaverse')()
const ComingSoonLazyImport = createFileRoute('/coming-soon')()
const IndexLazyImport = createFileRoute('/')()
const ClassesIndexLazyImport = createFileRoute('/classes/')()
const ClassesIdLazyImport = createFileRoute('/classes/$id')()

// Create/Update Routes

const MetaverseLazyRoute = MetaverseLazyImport.update({
  id: '/metaverse',
  path: '/metaverse',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/metaverse.lazy').then((d) => d.Route))

const ComingSoonLazyRoute = ComingSoonLazyImport.update({
  id: '/coming-soon',
  path: '/coming-soon',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/coming-soon.lazy').then((d) => d.Route))

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const ClassesIndexLazyRoute = ClassesIndexLazyImport.update({
  id: '/classes/',
  path: '/classes/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/classes/index.lazy').then((d) => d.Route))

const ClassesIdLazyRoute = ClassesIdLazyImport.update({
  id: '/classes/$id',
  path: '/classes/$id',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/classes/$id.lazy').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/coming-soon': {
      id: '/coming-soon'
      path: '/coming-soon'
      fullPath: '/coming-soon'
      preLoaderRoute: typeof ComingSoonLazyImport
      parentRoute: typeof rootRoute
    }
    '/metaverse': {
      id: '/metaverse'
      path: '/metaverse'
      fullPath: '/metaverse'
      preLoaderRoute: typeof MetaverseLazyImport
      parentRoute: typeof rootRoute
    }
    '/classes/$id': {
      id: '/classes/$id'
      path: '/classes/$id'
      fullPath: '/classes/$id'
      preLoaderRoute: typeof ClassesIdLazyImport
      parentRoute: typeof rootRoute
    }
    '/classes/': {
      id: '/classes/'
      path: '/classes'
      fullPath: '/classes'
      preLoaderRoute: typeof ClassesIndexLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/coming-soon': typeof ComingSoonLazyRoute
  '/metaverse': typeof MetaverseLazyRoute
  '/classes/$id': typeof ClassesIdLazyRoute
  '/classes': typeof ClassesIndexLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/coming-soon': typeof ComingSoonLazyRoute
  '/metaverse': typeof MetaverseLazyRoute
  '/classes/$id': typeof ClassesIdLazyRoute
  '/classes': typeof ClassesIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/coming-soon': typeof ComingSoonLazyRoute
  '/metaverse': typeof MetaverseLazyRoute
  '/classes/$id': typeof ClassesIdLazyRoute
  '/classes/': typeof ClassesIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/coming-soon' | '/metaverse' | '/classes/$id' | '/classes'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/coming-soon' | '/metaverse' | '/classes/$id' | '/classes'
  id:
    | '__root__'
    | '/'
    | '/coming-soon'
    | '/metaverse'
    | '/classes/$id'
    | '/classes/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  ComingSoonLazyRoute: typeof ComingSoonLazyRoute
  MetaverseLazyRoute: typeof MetaverseLazyRoute
  ClassesIdLazyRoute: typeof ClassesIdLazyRoute
  ClassesIndexLazyRoute: typeof ClassesIndexLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  ComingSoonLazyRoute: ComingSoonLazyRoute,
  MetaverseLazyRoute: MetaverseLazyRoute,
  ClassesIdLazyRoute: ClassesIdLazyRoute,
  ClassesIndexLazyRoute: ClassesIndexLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/coming-soon",
        "/metaverse",
        "/classes/$id",
        "/classes/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/coming-soon": {
      "filePath": "coming-soon.lazy.tsx"
    },
    "/metaverse": {
      "filePath": "metaverse.lazy.tsx"
    },
    "/classes/$id": {
      "filePath": "classes/$id.lazy.tsx"
    },
    "/classes/": {
      "filePath": "classes/index.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
